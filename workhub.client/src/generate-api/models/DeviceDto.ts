/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceCategoryMinimalDto } from './DeviceCategoryMinimalDto';
import {
    DeviceCategoryMinimalDtoFromJSON,
    DeviceCategoryMinimalDtoFromJSONTyped,
    DeviceCategoryMinimalDtoToJSON,
    DeviceCategoryMinimalDtoToJSONTyped,
} from './DeviceCategoryMinimalDto';
import type { UserMinimalDto } from './UserMinimalDto';
import {
    UserMinimalDtoFromJSON,
    UserMinimalDtoFromJSONTyped,
    UserMinimalDtoToJSON,
    UserMinimalDtoToJSONTyped,
} from './UserMinimalDto';
import type { DeviceStatus } from './DeviceStatus';
import {
    DeviceStatusFromJSON,
    DeviceStatusFromJSONTyped,
    DeviceStatusToJSON,
    DeviceStatusToJSONTyped,
} from './DeviceStatus';

/**
 * 
 * @export
 * @interface DeviceDto
 */
export interface DeviceDto {
    /**
     * 
     * @type {number}
     * @memberof DeviceDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    location?: string | null;
    /**
     * 
     * @type {DeviceStatus}
     * @memberof DeviceDto
     */
    status?: DeviceStatus;
    /**
     * 
     * @type {UserMinimalDto}
     * @memberof DeviceDto
     */
    assignedUser?: UserMinimalDto;
    /**
     * 
     * @type {Array<DeviceCategoryMinimalDto>}
     * @memberof DeviceDto
     */
    deviceCategories?: Array<DeviceCategoryMinimalDto> | null;
}



/**
 * Check if a given object implements the DeviceDto interface.
 */
export function instanceOfDeviceDto(value: object): value is DeviceDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function DeviceDtoFromJSON(json: any): DeviceDto {
    return DeviceDtoFromJSONTyped(json, false);
}

export function DeviceDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'location': json['location'] == null ? undefined : json['location'],
        'status': json['status'] == null ? undefined : DeviceStatusFromJSON(json['status']),
        'assignedUser': json['assignedUser'] == null ? undefined : UserMinimalDtoFromJSON(json['assignedUser']),
        'deviceCategories': json['deviceCategories'] == null ? undefined : ((json['deviceCategories'] as Array<any>).map(DeviceCategoryMinimalDtoFromJSON)),
    };
}

export function DeviceDtoToJSON(json: any): DeviceDto {
    return DeviceDtoToJSONTyped(json, false);
}

export function DeviceDtoToJSONTyped(value?: DeviceDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'location': value['location'],
        'status': DeviceStatusToJSON(value['status']),
        'assignedUser': UserMinimalDtoToJSON(value['assignedUser']),
        'deviceCategories': value['deviceCategories'] == null ? undefined : ((value['deviceCategories'] as Array<any>).map(DeviceCategoryMinimalDtoToJSON)),
    };
}

