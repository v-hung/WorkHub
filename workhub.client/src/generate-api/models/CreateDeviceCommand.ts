/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceStatus } from './DeviceStatus';
import {
    DeviceStatusFromJSON,
    DeviceStatusFromJSONTyped,
    DeviceStatusToJSON,
    DeviceStatusToJSONTyped,
} from './DeviceStatus';

/**
 * 
 * @export
 * @interface CreateDeviceCommand
 */
export interface CreateDeviceCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceCommand
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceCommand
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceCommand
     */
    location?: string | null;
    /**
     * 
     * @type {DeviceStatus}
     * @memberof CreateDeviceCommand
     */
    status?: DeviceStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceCommand
     */
    assignedUserId?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateDeviceCommand
     */
    deviceCategoryIds?: Array<number> | null;
}



/**
 * Check if a given object implements the CreateDeviceCommand interface.
 */
export function instanceOfCreateDeviceCommand(value: object): value is CreateDeviceCommand {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CreateDeviceCommandFromJSON(json: any): CreateDeviceCommand {
    return CreateDeviceCommandFromJSONTyped(json, false);
}

export function CreateDeviceCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDeviceCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'location': json['location'] == null ? undefined : json['location'],
        'status': json['status'] == null ? undefined : DeviceStatusFromJSON(json['status']),
        'assignedUserId': json['assignedUserId'] == null ? undefined : json['assignedUserId'],
        'deviceCategoryIds': json['deviceCategoryIds'] == null ? undefined : json['deviceCategoryIds'],
    };
}

export function CreateDeviceCommandToJSON(json: any): CreateDeviceCommand {
    return CreateDeviceCommandToJSONTyped(json, false);
}

export function CreateDeviceCommandToJSONTyped(value?: CreateDeviceCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'location': value['location'],
        'status': DeviceStatusToJSON(value['status']),
        'assignedUserId': value['assignedUserId'],
        'deviceCategoryIds': value['deviceCategoryIds'],
    };
}

