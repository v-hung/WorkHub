/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SearchCondition } from './SearchCondition';
import {
    SearchConditionFromJSON,
    SearchConditionFromJSONTyped,
    SearchConditionToJSON,
    SearchConditionToJSONTyped,
} from './SearchCondition';
import type { LogicalOperator } from './LogicalOperator';
import {
    LogicalOperatorFromJSON,
    LogicalOperatorFromJSONTyped,
    LogicalOperatorToJSON,
    LogicalOperatorToJSONTyped,
} from './LogicalOperator';

/**
 * 
 * @export
 * @interface SearchConditionGroup
 */
export interface SearchConditionGroup {
    /**
     * 
     * @type {LogicalOperator}
     * @memberof SearchConditionGroup
     */
    operator?: LogicalOperator;
    /**
     * 
     * @type {Array<SearchConditionGroup>}
     * @memberof SearchConditionGroup
     */
    groups?: Array<SearchConditionGroup> | null;
    /**
     * 
     * @type {Array<SearchCondition>}
     * @memberof SearchConditionGroup
     */
    conditions?: Array<SearchCondition> | null;
}



/**
 * Check if a given object implements the SearchConditionGroup interface.
 */
export function instanceOfSearchConditionGroup(value: object): value is SearchConditionGroup {
    return true;
}

export function SearchConditionGroupFromJSON(json: any): SearchConditionGroup {
    return SearchConditionGroupFromJSONTyped(json, false);
}

export function SearchConditionGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchConditionGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'operator': json['operator'] == null ? undefined : LogicalOperatorFromJSON(json['operator']),
        'groups': json['groups'] == null ? undefined : ((json['groups'] as Array<any>).map(SearchConditionGroupFromJSON)),
        'conditions': json['conditions'] == null ? undefined : ((json['conditions'] as Array<any>).map(SearchConditionFromJSON)),
    };
}

export function SearchConditionGroupToJSON(json: any): SearchConditionGroup {
    return SearchConditionGroupToJSONTyped(json, false);
}

export function SearchConditionGroupToJSONTyped(value?: SearchConditionGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'operator': LogicalOperatorToJSON(value['operator']),
        'groups': value['groups'] == null ? undefined : ((value['groups'] as Array<any>).map(SearchConditionGroupToJSON)),
        'conditions': value['conditions'] == null ? undefined : ((value['conditions'] as Array<any>).map(SearchConditionToJSON)),
    };
}

