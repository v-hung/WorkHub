/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLeaveRequestDto,
  CreateTimesheetAdjustmentRequestDto,
  ErrorResponse,
  ErrorValidateResponse,
  RequestCombinedDto,
} from '../models/index';
import {
    CreateLeaveRequestDtoFromJSON,
    CreateLeaveRequestDtoToJSON,
    CreateTimesheetAdjustmentRequestDtoFromJSON,
    CreateTimesheetAdjustmentRequestDtoToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
    RequestCombinedDtoFromJSON,
    RequestCombinedDtoToJSON,
} from '../models/index';

export interface LeaveRequestApprovalRequestRequest {
    id: number;
}

export interface LeaveRequestCancelRequestRequest {
    id: number;
}

export interface LeaveRequestCreateRequestRequest {
    createLeaveRequestDto?: CreateLeaveRequestDto;
}

export interface LeaveRequestRejectRequestRequest {
    id: number;
}

export interface TimesheetAdjustmentRequestApprovalRequestRequest {
    id: number;
}

export interface TimesheetAdjustmentRequestCancelRequestRequest {
    id: number;
}

export interface TimesheetAdjustmentRequestCreateRequestRequest {
    createTimesheetAdjustmentRequestDto?: CreateTimesheetAdjustmentRequestDto;
}

export interface TimesheetAdjustmentRequestRejectRequestRequest {
    id: number;
}

/**
 * 
 */
export class RequestsApi extends runtime.BaseAPI {

    /**
     */
    async leaveRequestApprovalRequestRaw(requestParameters: LeaveRequestApprovalRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling leaveRequestApprovalRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/{id}/leave-approval`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async leaveRequestApprovalRequest(requestParameters: LeaveRequestApprovalRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.leaveRequestApprovalRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async leaveRequestCancelRequestRaw(requestParameters: LeaveRequestCancelRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling leaveRequestCancelRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/{id}/leave-cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async leaveRequestCancelRequest(requestParameters: LeaveRequestCancelRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.leaveRequestCancelRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async leaveRequestCreateRequestRaw(requestParameters: LeaveRequestCreateRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/leave`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLeaveRequestDtoToJSON(requestParameters['createLeaveRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async leaveRequestCreateRequest(requestParameters: LeaveRequestCreateRequestRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.leaveRequestCreateRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async leaveRequestRejectRequestRaw(requestParameters: LeaveRequestRejectRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling leaveRequestRejectRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/{id}/leave-reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async leaveRequestRejectRequest(requestParameters: LeaveRequestRejectRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.leaveRequestRejectRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetAdjustmentRequestApprovalRequestRaw(requestParameters: TimesheetAdjustmentRequestApprovalRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling timesheetAdjustmentRequestApprovalRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/{id}/timesheet-adjustment-approval`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async timesheetAdjustmentRequestApprovalRequest(requestParameters: TimesheetAdjustmentRequestApprovalRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.timesheetAdjustmentRequestApprovalRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetAdjustmentRequestCancelRequestRaw(requestParameters: TimesheetAdjustmentRequestCancelRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling timesheetAdjustmentRequestCancelRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/{id}/timesheet-adjustment-cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async timesheetAdjustmentRequestCancelRequest(requestParameters: TimesheetAdjustmentRequestCancelRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.timesheetAdjustmentRequestCancelRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetAdjustmentRequestCreateRequestRaw(requestParameters: TimesheetAdjustmentRequestCreateRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/timesheet-adjustment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTimesheetAdjustmentRequestDtoToJSON(requestParameters['createTimesheetAdjustmentRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async timesheetAdjustmentRequestCreateRequest(requestParameters: TimesheetAdjustmentRequestCreateRequestRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.timesheetAdjustmentRequestCreateRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetAdjustmentRequestRejectRequestRaw(requestParameters: TimesheetAdjustmentRequestRejectRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestCombinedDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling timesheetAdjustmentRequestRejectRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/requests/{id}/timesheet-adjustment-reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestCombinedDtoFromJSON(jsonValue));
    }

    /**
     */
    async timesheetAdjustmentRequestRejectRequest(requestParameters: TimesheetAdjustmentRequestRejectRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestCombinedDto> {
        const response = await this.timesheetAdjustmentRequestRejectRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
