/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ErrorValidateResponse,
  TimesheetDto,
  TimesheetDtoTimesheetResponse,
  TimesheetFullDtoPaginated,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
    TimesheetDtoFromJSON,
    TimesheetDtoToJSON,
    TimesheetDtoTimesheetResponseFromJSON,
    TimesheetDtoTimesheetResponseToJSON,
    TimesheetFullDtoPaginatedFromJSON,
    TimesheetFullDtoPaginatedToJSON,
} from '../models/index';

export interface TimesheetGetCurrentUserMonthlyTimesheetsRequest {
    month?: number;
    year?: number;
}

export interface TimesheetGetMonthlyTimesheetsRequest {
    month?: number;
    year?: number;
    pageNumber?: number;
    pageSize?: number;
    ids?: Array<string>;
}

/**
 * 
 */
export class TimesheetApi extends runtime.BaseAPI {

    /**
     */
    async timesheetCheckInRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimesheetDtoTimesheetResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/timesheets/checkin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimesheetDtoTimesheetResponseFromJSON(jsonValue));
    }

    /**
     */
    async timesheetCheckIn(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimesheetDtoTimesheetResponse> {
        const response = await this.timesheetCheckInRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetCheckOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimesheetDtoTimesheetResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/timesheets/checkout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimesheetDtoTimesheetResponseFromJSON(jsonValue));
    }

    /**
     */
    async timesheetCheckOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimesheetDtoTimesheetResponse> {
        const response = await this.timesheetCheckOutRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetGetCurrentUserMonthlyTimesheetsRaw(requestParameters: TimesheetGetCurrentUserMonthlyTimesheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimesheetDto>>> {
        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/timesheets/monthly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimesheetDtoFromJSON));
    }

    /**
     */
    async timesheetGetCurrentUserMonthlyTimesheets(requestParameters: TimesheetGetCurrentUserMonthlyTimesheetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimesheetDto>> {
        const response = await this.timesheetGetCurrentUserMonthlyTimesheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetGetMonthlyTimesheetsRaw(requestParameters: TimesheetGetMonthlyTimesheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimesheetFullDtoPaginated>> {
        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['Month'] = requestParameters['month'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['Year'] = requestParameters['year'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['Ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/timesheets/monthly/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimesheetFullDtoPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async timesheetGetMonthlyTimesheets(requestParameters: TimesheetGetMonthlyTimesheetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimesheetFullDtoPaginated> {
        const response = await this.timesheetGetMonthlyTimesheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timesheetGetTodayTimesheetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimesheetDtoTimesheetResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/timesheets/today`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimesheetDtoTimesheetResponseFromJSON(jsonValue));
    }

    /**
     */
    async timesheetGetTodayTimesheet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimesheetDtoTimesheetResponse> {
        const response = await this.timesheetGetTodayTimesheetRaw(initOverrides);
        return await response.value();
    }

}
