/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CursorPagedRequestDirection,
  ErrorResponse,
  ErrorValidateResponse,
  NotificationDtoCursorPaginated,
  SearchCondition,
  SendTestNotificationCommand,
} from '../models/index';
import {
    CursorPagedRequestDirectionFromJSON,
    CursorPagedRequestDirectionToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
    NotificationDtoCursorPaginatedFromJSON,
    NotificationDtoCursorPaginatedToJSON,
    SearchConditionFromJSON,
    SearchConditionToJSON,
    SendTestNotificationCommandFromJSON,
    SendTestNotificationCommandToJSON,
} from '../models/index';

export interface NotificationSearchRequest {
    cursorId?: number;
    cursorPagedRequestDirection?: CursorPagedRequestDirection;
    newestFirst?: boolean;
    searchConditions?: Array<SearchCondition>;
}

export interface NotificationSendTestNotificationRequest {
    sendTestNotificationCommand?: SendTestNotificationCommand;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     */
    async notificationGetUnreadCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/notifications/unread-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async notificationGetUnreadCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.notificationGetUnreadCountRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationSearchRaw(requestParameters: NotificationSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationDtoCursorPaginated>> {
        const queryParameters: any = {};

        if (requestParameters['cursorId'] != null) {
            queryParameters['CursorId'] = requestParameters['cursorId'];
        }

        if (requestParameters['cursorPagedRequestDirection'] != null) {
            queryParameters['CursorPagedRequestDirection'] = requestParameters['cursorPagedRequestDirection'];
        }

        if (requestParameters['newestFirst'] != null) {
            queryParameters['NewestFirst'] = requestParameters['newestFirst'];
        }

        if (requestParameters['searchConditions'] != null) {
            queryParameters['SearchConditions'] = requestParameters['searchConditions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDtoCursorPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async notificationSearch(requestParameters: NotificationSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationDtoCursorPaginated> {
        const response = await this.notificationSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationSendTestNotificationRaw(requestParameters: NotificationSendTestNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/notifications/send-test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendTestNotificationCommandToJSON(requestParameters['sendTestNotificationCommand']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async notificationSendTestNotification(requestParameters: NotificationSendTestNotificationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.notificationSendTestNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
