/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProjectCommand,
  ErrorResponse,
  ErrorValidateResponse,
  ProjectDto,
  ProjectDtoPaginated,
} from '../models/index';
import {
    CreateProjectCommandFromJSON,
    CreateProjectCommandToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
    ProjectDtoFromJSON,
    ProjectDtoToJSON,
    ProjectDtoPaginatedFromJSON,
    ProjectDtoPaginatedToJSON,
} from '../models/index';

export interface ProjectCreateRequest {
    createProjectCommand?: CreateProjectCommand;
}

export interface ProjectDeleteRequest {
    id: number;
}

export interface ProjectGetAllRequest {
    ids?: Array<number>;
}

export interface ProjectGetByIdRequest {
    id: number;
}

export interface ProjectSearchRequest {
    pageNumber: number;
    pageSize: number;
    searchString?: string;
    orderBy?: Array<string>;
}

export interface ProjectUpdateRequest {
    id: number;
    createProjectCommand?: CreateProjectCommand;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     */
    async projectCreateRaw(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectCommandToJSON(requestParameters['createProjectCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectCreate(requestParameters: ProjectCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDto> {
        const response = await this.projectCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectDeleteRaw(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectDelete(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectGetAllRaw(requestParameters: ProjectGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectDto>>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/projects/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectDtoFromJSON));
    }

    /**
     */
    async projectGetAll(requestParameters: ProjectGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectDto>> {
        const response = await this.projectGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectGetByIdRaw(requestParameters: ProjectGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectGetById(requestParameters: ProjectGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDto> {
        const response = await this.projectGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectSearchRaw(requestParameters: ProjectSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDtoPaginated>> {
        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling projectSearch().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling projectSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['SearchString'] = requestParameters['searchString'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['OrderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async projectSearch(requestParameters: ProjectSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDtoPaginated> {
        const response = await this.projectSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectUpdateRaw(requestParameters: ProjectUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectCommandToJSON(requestParameters['createProjectCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectUpdate(requestParameters: ProjectUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDto> {
        const response = await this.projectUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
