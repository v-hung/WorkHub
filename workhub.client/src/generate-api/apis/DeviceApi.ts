/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeviceCommand,
  DeviceDto,
  DeviceDtoPaginated,
  ErrorResponse,
  ErrorValidateResponse,
} from '../models/index';
import {
    CreateDeviceCommandFromJSON,
    CreateDeviceCommandToJSON,
    DeviceDtoFromJSON,
    DeviceDtoToJSON,
    DeviceDtoPaginatedFromJSON,
    DeviceDtoPaginatedToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
} from '../models/index';

export interface DeviceCreateRequest {
    createDeviceCommand?: CreateDeviceCommand;
}

export interface DeviceDeleteRequest {
    id: number;
}

export interface DeviceGetAllRequest {
    ids?: Array<number>;
}

export interface DeviceGetByIdRequest {
    id: number;
}

export interface DeviceSearchRequest {
    pageNumber: number;
    pageSize: number;
    searchString?: string;
    orderBy?: Array<string>;
}

export interface DeviceUpdateRequest {
    id: number;
    createDeviceCommand?: CreateDeviceCommand;
}

/**
 * 
 */
export class DeviceApi extends runtime.BaseAPI {

    /**
     */
    async deviceCreateRaw(requestParameters: DeviceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceCommandToJSON(requestParameters['createDeviceCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceCreate(requestParameters: DeviceCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceDto> {
        const response = await this.deviceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceDeleteRaw(requestParameters: DeviceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceDelete(requestParameters: DeviceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceGetAllRaw(requestParameters: DeviceGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DeviceDto>>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/devices/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceDtoFromJSON));
    }

    /**
     */
    async deviceGetAll(requestParameters: DeviceGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DeviceDto>> {
        const response = await this.deviceGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceGetByIdRaw(requestParameters: DeviceGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceGetById(requestParameters: DeviceGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceDto> {
        const response = await this.deviceGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceSearchRaw(requestParameters: DeviceSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceDtoPaginated>> {
        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling deviceSearch().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling deviceSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['SearchString'] = requestParameters['searchString'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['OrderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceDtoPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async deviceSearch(requestParameters: DeviceSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceDtoPaginated> {
        const response = await this.deviceSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceUpdateRaw(requestParameters: DeviceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceCommandToJSON(requestParameters['createDeviceCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceUpdate(requestParameters: DeviceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceDto> {
        const response = await this.deviceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
