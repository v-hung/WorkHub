/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkTimeCommand,
  ErrorResponse,
  ErrorValidateResponse,
  WorkTimeDto,
  WorkTimeDtoPaginated,
} from '../models/index';
import {
    CreateWorkTimeCommandFromJSON,
    CreateWorkTimeCommandToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
    WorkTimeDtoFromJSON,
    WorkTimeDtoToJSON,
    WorkTimeDtoPaginatedFromJSON,
    WorkTimeDtoPaginatedToJSON,
} from '../models/index';

export interface WorkTimeCreateRequest {
    createWorkTimeCommand?: CreateWorkTimeCommand;
}

export interface WorkTimeDeleteRequest {
    id: number;
}

export interface WorkTimeGetAllRequest {
    ids?: Array<number>;
}

export interface WorkTimeGetByIdRequest {
    id: number;
}

export interface WorkTimeSearchRequest {
    pageNumber: number;
    pageSize: number;
    searchString?: string;
    orderBy?: Array<string>;
}

export interface WorkTimeUpdateRequest {
    id: number;
    createWorkTimeCommand?: CreateWorkTimeCommand;
}

/**
 * 
 */
export class WorkTimeApi extends runtime.BaseAPI {

    /**
     */
    async workTimeCreateRaw(requestParameters: WorkTimeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkTimeDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/work-times`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkTimeCommandToJSON(requestParameters['createWorkTimeCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTimeDtoFromJSON(jsonValue));
    }

    /**
     */
    async workTimeCreate(requestParameters: WorkTimeCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkTimeDto> {
        const response = await this.workTimeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async workTimeDeleteRaw(requestParameters: WorkTimeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTimeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/work-times/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async workTimeDelete(requestParameters: WorkTimeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workTimeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async workTimeGetAllRaw(requestParameters: WorkTimeGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkTimeDto>>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/work-times/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkTimeDtoFromJSON));
    }

    /**
     */
    async workTimeGetAll(requestParameters: WorkTimeGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkTimeDto>> {
        const response = await this.workTimeGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async workTimeGetByIdRaw(requestParameters: WorkTimeGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkTimeDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTimeGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/work-times/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTimeDtoFromJSON(jsonValue));
    }

    /**
     */
    async workTimeGetById(requestParameters: WorkTimeGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkTimeDto> {
        const response = await this.workTimeGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async workTimeSearchRaw(requestParameters: WorkTimeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkTimeDtoPaginated>> {
        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling workTimeSearch().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling workTimeSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['SearchString'] = requestParameters['searchString'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['OrderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/work-times`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTimeDtoPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async workTimeSearch(requestParameters: WorkTimeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkTimeDtoPaginated> {
        const response = await this.workTimeSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async workTimeUpdateRaw(requestParameters: WorkTimeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkTimeDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTimeUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/work-times/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkTimeCommandToJSON(requestParameters['createWorkTimeCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTimeDtoFromJSON(jsonValue));
    }

    /**
     */
    async workTimeUpdate(requestParameters: WorkTimeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkTimeDto> {
        const response = await this.workTimeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
