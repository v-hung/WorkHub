/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTeamCommand,
  ErrorResponse,
  ErrorValidateResponse,
  PagedRequest,
  TeamDto,
  TeamDtoPaginated,
  TeamFullDto,
} from '../models/index';
import {
    CreateTeamCommandFromJSON,
    CreateTeamCommandToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
    PagedRequestFromJSON,
    PagedRequestToJSON,
    TeamDtoFromJSON,
    TeamDtoToJSON,
    TeamDtoPaginatedFromJSON,
    TeamDtoPaginatedToJSON,
    TeamFullDtoFromJSON,
    TeamFullDtoToJSON,
} from '../models/index';

export interface TeamCreateRequest {
    createTeamCommand?: CreateTeamCommand;
}

export interface TeamDeleteRequest {
    id: number;
}

export interface TeamGetAllRequest {
    ids?: Array<number>;
}

export interface TeamGetByIdRequest {
    id: number;
}

export interface TeamSearchRequest {
    pagedRequest?: PagedRequest;
}

export interface TeamUpdateRequest {
    id: number;
    createTeamCommand?: CreateTeamCommand;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     */
    async teamCreateRaw(requestParameters: TeamCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamCommandToJSON(requestParameters['createTeamCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     */
    async teamCreate(requestParameters: TeamCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teamDeleteRaw(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async teamDelete(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async teamGetAllRaw(requestParameters: TeamGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDto>>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamDtoFromJSON));
    }

    /**
     */
    async teamGetAll(requestParameters: TeamGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDto>> {
        const response = await this.teamGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teamGetByIdRaw(requestParameters: TeamGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamFullDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFullDtoFromJSON(jsonValue));
    }

    /**
     */
    async teamGetById(requestParameters: TeamGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamFullDto> {
        const response = await this.teamGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teamSearchRaw(requestParameters: TeamSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDtoPaginated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/teams/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagedRequestToJSON(requestParameters['pagedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async teamSearch(requestParameters: TeamSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDtoPaginated> {
        const response = await this.teamSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teamUpdateRaw(requestParameters: TeamUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamCommandToJSON(requestParameters['createTeamCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     */
    async teamUpdate(requestParameters: TeamUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
