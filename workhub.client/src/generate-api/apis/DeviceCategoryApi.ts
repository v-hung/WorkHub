/* tslint:disable */
/* eslint-disable */
/**
 * WorkHub.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeviceCategoryCommand,
  DeviceCategoryDto,
  DeviceCategoryDtoPaginated,
  ErrorResponse,
  ErrorValidateResponse,
} from '../models/index';
import {
    CreateDeviceCategoryCommandFromJSON,
    CreateDeviceCategoryCommandToJSON,
    DeviceCategoryDtoFromJSON,
    DeviceCategoryDtoToJSON,
    DeviceCategoryDtoPaginatedFromJSON,
    DeviceCategoryDtoPaginatedToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ErrorValidateResponseFromJSON,
    ErrorValidateResponseToJSON,
} from '../models/index';

export interface DeviceCategoryCreateRequest {
    createDeviceCategoryCommand?: CreateDeviceCategoryCommand;
}

export interface DeviceCategoryDeleteRequest {
    id: number;
}

export interface DeviceCategoryGetAllRequest {
    ids?: Array<number>;
}

export interface DeviceCategoryGetByIdRequest {
    id: number;
}

export interface DeviceCategorySearchRequest {
    pageNumber: number;
    pageSize: number;
    searchString?: string;
    orderBy?: Array<string>;
}

export interface DeviceCategoryUpdateRequest {
    id: number;
    createDeviceCategoryCommand?: CreateDeviceCategoryCommand;
}

/**
 * 
 */
export class DeviceCategoryApi extends runtime.BaseAPI {

    /**
     */
    async deviceCategoryCreateRaw(requestParameters: DeviceCategoryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceCategoryDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/device-categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceCategoryCommandToJSON(requestParameters['createDeviceCategoryCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceCategoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceCategoryCreate(requestParameters: DeviceCategoryCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceCategoryDto> {
        const response = await this.deviceCategoryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceCategoryDeleteRaw(requestParameters: DeviceCategoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceCategoryDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/device-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceCategoryDelete(requestParameters: DeviceCategoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceCategoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceCategoryGetAllRaw(requestParameters: DeviceCategoryGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DeviceCategoryDto>>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/device-categories/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceCategoryDtoFromJSON));
    }

    /**
     */
    async deviceCategoryGetAll(requestParameters: DeviceCategoryGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DeviceCategoryDto>> {
        const response = await this.deviceCategoryGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceCategoryGetByIdRaw(requestParameters: DeviceCategoryGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceCategoryDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceCategoryGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/device-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceCategoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceCategoryGetById(requestParameters: DeviceCategoryGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceCategoryDto> {
        const response = await this.deviceCategoryGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceCategorySearchRaw(requestParameters: DeviceCategorySearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceCategoryDtoPaginated>> {
        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling deviceCategorySearch().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling deviceCategorySearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['SearchString'] = requestParameters['searchString'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['OrderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/device-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceCategoryDtoPaginatedFromJSON(jsonValue));
    }

    /**
     */
    async deviceCategorySearch(requestParameters: DeviceCategorySearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceCategoryDtoPaginated> {
        const response = await this.deviceCategorySearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceCategoryUpdateRaw(requestParameters: DeviceCategoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceCategoryDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceCategoryUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/device-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceCategoryCommandToJSON(requestParameters['createDeviceCategoryCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceCategoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceCategoryUpdate(requestParameters: DeviceCategoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceCategoryDto> {
        const response = await this.deviceCategoryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
