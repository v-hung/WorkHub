import{an as l,R as h,r as d,P as m}from"./index--uR3bosk.js";const f=["xxl","xl","lg","md","sm","xs"],x=n=>({xs:`(max-width: ${n.screenXSMax}px)`,sm:`(min-width: ${n.screenSM}px)`,md:`(min-width: ${n.screenMD}px)`,lg:`(min-width: ${n.screenLG}px)`,xl:`(min-width: ${n.screenXL}px)`,xxl:`(min-width: ${n.screenXXL}px)`}),$=n=>{const e=n,t=[].concat(f).reverse();return t.forEach((o,c)=>{const s=o.toUpperCase(),i=`screen${s}Min`,r=`screen${s}`;if(!(e[i]<=e[r]))throw new Error(`${i}<=${r} fails : !(${e[i]}<=${e[r]})`);if(c<t.length-1){const a=`screen${s}Max`;if(!(e[r]<=e[a]))throw new Error(`${r}<=${a} fails : !(${e[r]}<=${e[a]})`);const u=`screen${t[c+1].toUpperCase()}Min`;if(!(e[a]<=e[u]))throw new Error(`${a}<=${u} fails : !(${e[a]}<=${e[u]})`)}}),n};function b(){const[,n]=l(),e=x($(n));return h.useMemo(()=>{const t=new Map;let o=-1,c={};return{matchHandlers:{},dispatch(s){return c=s,t.forEach(i=>i(c)),t.size>=1},subscribe(s){return t.size||this.register(),o+=1,t.set(o,s),s(c),o},unsubscribe(s){t.delete(s),t.size||this.unregister()},unregister(){Object.keys(e).forEach(s=>{const i=e[s],r=this.matchHandlers[i];r==null||r.mql.removeListener(r==null?void 0:r.listener)}),t.clear()},register(){Object.keys(e).forEach(s=>{const i=e[s],r=p=>{let{matches:u}=p;this.dispatch(Object.assign(Object.assign({},c),{[s]:u}))},a=window.matchMedia(i);a.addListener(r),this.matchHandlers[i]={mql:a,listener:r},r(a)})},responsiveMap:e}},[n])}function g(){const[,n]=d.useReducer(e=>e+1,0);return n}function v(){let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0,e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const t=d.useRef(e),o=g(),c=b();return m(()=>{const s=c.subscribe(i=>{t.current=i,n&&o()});return()=>c.unsubscribe(s)},[]),t.current}export{g as a,f as r,v as u};
